plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'jacoco'
}

group = 'com.autostore'
version = '0.0.1-SNAPSHOT'
description = 'user'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation("jakarta.inject:jakarta.inject-api:2.0.0")
    implementation 'org.flywaydb:flyway-core'
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4")
    testImplementation("org.springframework.boot:spring-boot-testcontainers")
    testImplementation("org.testcontainers:junit-jupiter:1.17.3")
    testImplementation("org.testcontainers:postgresql:1.17.3")
    testImplementation("io.cucumber:cucumber-java:7.23.0")
    testImplementation("io.cucumber:cucumber-spring:7.23.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-console-standalone:1.10.2")
    testImplementation("io.cucumber:cucumber-junit-platform-engine:7.23.0")
    testImplementation("org.junit.platform:junit-platform-suite-api:1.9.3")
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging { events "passed", "skipped", "failed" }
    finalizedBy(jacocoTestReport, jacocoTestCoverageVerification)
}

def jacocoClassDirectories = files(sourceSets.main.output).asFileTree.matching {
    exclude '**/UserApplication**'
    exclude '**/config/**'
    exclude '**/exception/**'
}

jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
        xml.outputLocation.set(layout.buildDirectory.file("jacoco.xml"))
    }

    classDirectories.setFrom(jacocoClassDirectories)
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
    executionData.setFrom(files("${layout.buildDirectory.get().asFile}/jacoco/test.exec"))

    doLast {
        println "JaCoCo HTML report available at: ${reports.html.outputLocation.get().asFile.toURI()}"
    }
}

jacocoTestCoverageVerification {
    dependsOn(tasks.test)

    executionData.setFrom(files("${layout.buildDirectory.get().asFile}/jacoco/test.exec"))
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(jacocoClassDirectories)

    violationRules {
        rule {
            limit {
                minimum = 0.30
            }
        }
    }
}
